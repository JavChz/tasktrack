{"version":3,"sources":["libs/formatHours.js","components/SingleTask.js","components/TaskArchive.js","components/Goals/Goals.js","components/GoalsBar/GoalsBar.js","App.js","serviceWorker.js","index.js"],"names":["formatHours","time","Date","toISOString","substr","SingleTask","task","className","id","name","duration","endAt","toLocaleTimeString","TaskArchive","archive","timerGlobal","slice","reverse","map","singleTask","index","key","Goals","goal","handleGoals","tasks","progress","toFixed","type","value","onChange","placeholder","GoalsBar","style","width","App","initTasks","initTimerGlobal","initArchive","initGoal","localStorage","hasOwnProperty","Number","getItem","JSON","parse","useState","setArchive","nameTask","setNameTask","now","last","setLast","pause","setPause","setTasks","timer","setTimer","setTimerGlobal","setGoal","goalKind","useEffect","setItem","stringify","interval","setInterval","document","title","reduce","a","b","clearInterval","isDisabled","condition","pauseTask","status","event","String","target","onClick","entryArchive","oldArchive","startTask","disabled","length","tempArchive","pop","deleteLastTask","clear","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02d0b251.chunk.js","sourcesContent":[" const formatHours = function(time) {\r\n    let measuredTime = new Date(time);\r\n    let MHSTime = measuredTime.toISOString().substr(11, 8);\r\n    return MHSTime;\r\n  };\r\n\r\n  export default formatHours;","import React from \"react\";\r\nimport \"./SingleTask.css\";\r\nimport formatHours from \"../libs/formatHours\";\r\n\r\nconst SingleTask = ({ task }) => {\r\n  return (\r\n    <div className=\"singleTask\">\r\n      <div>{task.id}</div>\r\n      <div>{task.name}</div>\r\n      <div>{formatHours(task.duration)}</div>\r\n      <div>{new Date(task.endAt).toLocaleTimeString(\"en-US\")}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default SingleTask;\r\n","import React from \"react\";\r\nimport SingleTask from \"./SingleTask\";\r\n\r\n\r\nconst TaskArchive = ({archive,timerGlobal}) => {\r\n  return (\r\n    \r\n    <div className=\"taskArchive\">\r\n      \r\n      <div className=\"singleTask\">\r\n        <div>#</div>\r\n        <div>Name</div>\r\n        <div>Duration</div>\r\n        <div>Ended at</div>\r\n      </div>\r\n      {archive\r\n        .slice(0)\r\n        .reverse()\r\n        .map((singleTask, index) => (\r\n          <SingleTask task={singleTask} key={index} ></SingleTask>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\nexport default TaskArchive;\r\n","import React from \"react\";\r\n\r\nimport \"./Goals.css\";\r\n\r\nfunction Goals({ goal, handleGoals, tasks }) {\r\n  let progress = goal / tasks;\r\n  progress = (100 / goal) * tasks;\r\n\r\n  return (\r\n    <div className=\"Goals\">\r\n      <h6>\r\n        {progress.toFixed(2)}% of 100% | {tasks} of{\" \"}\r\n        <input\r\n          type=\"number\"\r\n          value={goal}\r\n          onChange={handleGoals}\r\n          placeholder=\"No. of Goals\"\r\n        />\r\n      </h6>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Goals;\r\n","import React from \"react\";\r\n\r\nimport \"./GoalsBar.css\";\r\n\r\nfunction GoalsBar({ goal, tasks }) {\r\n  let progress = goal / tasks;\r\n  progress = (100 / goal) * tasks;\r\n  return (\r\n    <div>\r\n      <div className=\"goalsBar\">\r\n        <div className=\"bar\" style={{ width: `${progress}%` }}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoalsBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport formatHours from \"./libs/formatHours\";\r\nimport TaskArchive from \"./components/TaskArchive\";\r\nimport Goals from \"./components/Goals/Goals\";\r\nimport GoalsBar from \"./components/GoalsBar/GoalsBar\";\r\n\r\nfunction App() {\r\n  const initTaskDefault = 1;\r\n  let initTasks = initTaskDefault;\r\n  let initTimerGlobal = 0;\r\n  let initArchive = [];\r\n  let initGoal = 250;\r\n  if (\r\n    localStorage.hasOwnProperty(\"tasks\") ||\r\n    localStorage.hasOwnProperty(\"timerGlobal\") ||\r\n    localStorage.hasOwnProperty(\"archive\") ||\r\n    localStorage.hasOwnProperty(\"goal\")\r\n  ) {\r\n    initTasks = Number(localStorage.getItem(\"tasks\"));\r\n    initTimerGlobal = Number(localStorage.getItem(\"timerGlobal\"));\r\n    initArchive = JSON.parse(localStorage.getItem(\"archive\")) || [];\r\n    initGoal = Number(localStorage.getItem(\"goal\")) || initGoal;\r\n  }\r\n  const [archive, setArchive] = useState(initArchive);\r\n  const [nameTask, setNameTask] = useState(\"\");\r\n  const [last, setLast] = useState(Date.now());\r\n  const [pause, setPause] = useState(true);\r\n  const [tasks, setTasks] = useState(initTasks);\r\n  const [timer, setTimer] = useState(0);\r\n  const [timerGlobal, setTimerGlobal] = useState(initTimerGlobal);\r\n  const [goal, setGoal] = useState(initGoal);\r\n  const [goalKind, setGoalKind] = useState(\"tasks\");\r\n\r\n  // init ClickTime\r\n  useEffect(() => {\r\n    const saveToLocal = function(){\r\n      localStorage.setItem(\"archive\", JSON.stringify(archive));\r\n      localStorage.setItem(\"timerGlobal\", timerGlobal);\r\n      localStorage.setItem(\"tasks\", tasks);\r\n      localStorage.setItem(\"goal\", goal);\r\n    }    \r\n    saveToLocal();\r\n    const interval = setInterval(() => {\r\n      if (!pause) {\r\n        setTimer(Date.now() - last);\r\n      }\r\n      document.title = `TaskTraker`;\r\n    }, 1000);\r\n    document.title = `${formatHours(timer)} | ${tasks}`;\r\n    setTimerGlobal(() => {\r\n      return archive.reduce((a, b) => {\r\n        return a + b[\"duration\"];\r\n      }, 0);\r\n    });\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [last, tasks, timer, pause, archive, goal]);\r\n\r\n  const startTask = function () {\r\n    let entryArchive = {\r\n      id: tasks,\r\n      name: nameTask,\r\n      duration: timer,\r\n      endAt: Date.now(),\r\n    };\r\n    setArchive((oldArchive) => [...oldArchive, entryArchive]);\r\n    setTimer(0);\r\n    setLast(Date.now());\r\n    setTasks(tasks + 1);\r\n  };\r\n\r\n  const deleteLastTask = function () {\r\n    setTimer(0);\r\n    if(archive.length > 1){\r\n      let tempArchive = archive;\r\n      tempArchive.pop();\r\n      setArchive(tempArchive);\r\n    }\r\n    setTasks(tasks-1);\r\n  };\r\n  const isDisabled = function (condition) {\r\n    if (condition) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  const reset = function () {\r\n    localStorage.clear();\r\n    localStorage.setItem(\"tasks\", initTaskDefault);\r\n    localStorage.setItem(\"goal\", initGoal);\r\n    setArchive([]);\r\n    setTasks(initTaskDefault);\r\n    setTimer(0);\r\n    setPause(true);\r\n    setTimerGlobal(0);\r\n    setGoal(initGoal)\r\n  };\r\n  const pauseTask = function (status) {\r\n    setLast(Date.now());\r\n    if (status) {\r\n      setTimer(0);\r\n    }\r\n    setPause(status);\r\n  };\r\n  const resetCurrent = function () {\r\n    localStorage.clear();\r\n    setLast(Date.now());\r\n    setTimer(0);\r\n  };\r\n  const handleNumber = function (event) {\r\n    setTasks(Number(event.target.value));\r\n  };\r\n  const handleName = function (event) {\r\n    setNameTask(String(event.target.value));\r\n  };\r\n  const handleGoals = function (event) {   \r\n    setGoal(Number(event.target.value));\r\n  };\r\n  return (\r\n    <div className=\"Main\">\r\n      <div className=\"timer\">\r\n        <input\r\n          type=\"text\"\r\n          value={nameTask}\r\n          onChange={handleName}\r\n          placeholder=\"Name of the Task\"\r\n        />\r\n        <input type=\"number\" value={tasks} onChange={handleNumber} />\r\n        <h3>Time in current task</h3>\r\n        <h2>{formatHours(timer)}</h2>\r\n        <button\r\n          className=\"finishTask\"\r\n          onClick={() => startTask()}\r\n          disabled={isDisabled(pause)}\r\n        >\r\n          Finish current task\r\n        </button>\r\n\r\n        <div className=\"toolButtons\">\r\n          <button\r\n            onClick={() => deleteLastTask()}\r\n            disabled={isDisabled(tasks <= 1)}\r\n          >\r\n            Undo\r\n          </button>\r\n          {pause ? (\r\n            <button onClick={() => pauseTask(false)}>Start</button>\r\n          ) : (\r\n            <button onClick={() => pauseTask(true)}>Stop</button>\r\n          )}\r\n          <button onClick={() => resetCurrent()}>Reset Current</button>\r\n          <button onClick={() => reset()}>Reset</button>\r\n        </div>\r\n      </div>\r\n      <Goals\r\n        goalKind={goalKind}\r\n        goal={goal}\r\n        tasks={tasks}\r\n        handleGoals={handleGoals}\r\n      ></Goals>\r\n      <GoalsBar goal={goal} tasks={tasks}></GoalsBar>\r\n      <h6>\r\n        Total Time: {formatHours(timerGlobal)} | Average{\" \"}\r\n        {timerGlobal && formatHours(timerGlobal / archive.length)}\r\n      </h6>\r\n      <TaskArchive archive={archive} timerGlobal={timerGlobal}></TaskArchive>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}