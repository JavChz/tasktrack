{"version":3,"sources":["libs/formatHours.js","components/SingleTask.js","components/TaskArchive.js","components/Goals/Goals.js","components/GoalsBar/GoalsBar.js","App.js","serviceWorker.js","index.js"],"names":["formatHours","time","Date","toISOString","substr","SingleTask","task","className","id","name","duration","endAt","toLocaleTimeString","TaskArchive","archive","slice","reverse","map","singleTask","index","key","Goals","input","GoalsBar","goal","tasks","progress","console","log","toFixed","style","width","App","initTasks","initTimerGlobal","initArchive","localStorage","hasOwnProperty","Number","getItem","JSON","parse","useState","setArchive","nameTask","setNameTask","now","last","setLast","pause","setPause","setTasks","timer","setTimer","timerGlobal","setTimerGlobal","goalKind","useEffect","interval","setInterval","document","title","reduce","a","b","clearInterval","isDisabled","condition","pauseTask","status","type","value","onChange","event","String","target","placeholder","onClick","entryArchive","oldArchive","setItem","stringify","startTask","disabled","tempArchive","pop","deleteLastTask","clear","length","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7e68835.chunk.js","sourcesContent":[" const formatHours = function(time) {\r\n    let measuredTime = new Date(time);\r\n    let MHSTime = measuredTime.toISOString().substr(11, 8);\r\n    return MHSTime;\r\n  };\r\n\r\n  export default formatHours;","import React from \"react\";\r\nimport \"./SingleTask.css\";\r\nimport formatHours from \"../libs/formatHours\";\r\n\r\nconst SingleTask = ({ task }) => {\r\n  return (\r\n    <div className=\"singleTask\">\r\n      <div>{task.id}</div>\r\n      <div>{task.name}</div>\r\n      <div>{formatHours(task.duration)}</div>\r\n      <div>{new Date(task.endAt).toLocaleTimeString(\"en-US\")}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default SingleTask;\r\n","import React from \"react\";\r\nimport SingleTask from \"./SingleTask\";\r\n\r\nconst TaskArchive = ({archive}) => {\r\n  return (\r\n    <div className=\"taskArchive\">\r\n      <div className=\"singleTask\">\r\n        <div>#</div>\r\n        <div>Name</div>\r\n        <div>Duration</div>\r\n        <div>Ended at</div>\r\n      </div>\r\n      {archive\r\n        .slice(0)\r\n        .reverse()\r\n        .map((singleTask, index) => (\r\n          <SingleTask task={singleTask} key={index} ></SingleTask>\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\nexport default TaskArchive;\r\n","import React from \"react\";\r\n\r\nimport './Goals.css';\r\n\r\nfunction Goals({input}){\r\n    \r\n    \r\n    return (\r\n        <div className=\"Goals\" >\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Goals;","import React from \"react\";\r\n\r\nimport \"./GoalsBar.css\";\r\n\r\nfunction GoalsBar({ goal, tasks }) {\r\n  let progress = goal / tasks;\r\n  progress = (100 / goal) * tasks;\r\n  console.log({ progress });\r\n\r\n  return (\r\n    <div>\r\n      <h4>\r\n        {progress.toFixed(2)}% of 100% | {tasks} of {goal}\r\n      </h4>\r\n      <div className=\"goalsBar\">\r\n        <div className=\"bar\" style={{ width: `${progress}%` }}></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GoalsBar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport formatHours from \"./libs/formatHours\";\r\nimport TaskArchive from \"./components/TaskArchive\";\r\nimport Goals from \"./components/Goals/Goals\";\r\nimport GoalsBar from \"./components/GoalsBar/GoalsBar\";\r\n\r\n\r\nfunction App() {\r\n  const initTaskDefault = 1;\r\n  let initTasks = initTaskDefault;\r\n  let initTimerGlobal = 0;\r\n  let initArchive = [];\r\n  if (\r\n    localStorage.hasOwnProperty(\"tasks\") ||\r\n    localStorage.hasOwnProperty(\"timerGlobal\") ||\r\n    localStorage.hasOwnProperty(\"archive\")\r\n  ) {\r\n    initTasks = Number(localStorage.getItem(\"tasks\"));\r\n    initTimerGlobal = Number(localStorage.getItem(\"timerGlobal\"));\r\n    initArchive = JSON.parse(localStorage.getItem(\"archive\")) || [];\r\n  }\r\n  const [archive, setArchive] = useState(initArchive);\r\n  const [nameTask, setNameTask] = useState(\"\");\r\n  const [last, setLast] = useState(Date.now());\r\n  const [pause, setPause] = useState(true);\r\n  const [tasks, setTasks] = useState(initTasks);\r\n  const [timer, setTimer] = useState(0);\r\n  \r\n  const [timerGlobal, setTimerGlobal] = useState(initTimerGlobal);\r\n  const [goal, setGoal] = useState(240);\r\n  const [goalKind, setGoalKind] = useState(\"tasks\");\r\n\r\n\r\n  // init ClickTime\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (!pause) {\r\n        setTimer(Date.now() - last);\r\n\r\n      }\r\n    }, 1000);\r\n    document.title = `${formatHours(timer)} | ${tasks}`;\r\n    setTimerGlobal(()=>{\r\n      return archive.reduce( (a, b) => {\r\n        return a + b[\"duration\"];\r\n      }, 0)\r\n    });\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [last, tasks, timer, pause, archive]);\r\n\r\n  const startTask = function () {\r\n    let entryArchive = {\r\n      id: tasks,\r\n      name: nameTask,\r\n      duration: timer,\r\n      endAt: Date.now(),\r\n    };\r\n    setArchive((oldArchive) => [...oldArchive, entryArchive]);\r\n    setTimer(0);\r\n    setLast(Date.now());\r\n    setTasks(tasks + 1);\r\n    console.log(archive);\r\n    localStorage.setItem(\"archive\", JSON.stringify(archive));\r\n    localStorage.setItem(\"timerGlobal\", timerGlobal);\r\n    localStorage.setItem(\"tasks\", tasks + 1);\r\n  };\r\n \r\n  const deleteLastTask = function () {\r\n    setTimer(0);\r\n    let tempArchive = archive;\r\n    console.log(tempArchive.pop());\r\n    setArchive(tempArchive);\r\n    localStorage.setItem(\"tasks\", tasks - 1);\r\n  };\r\n  const isDisabled = function (condition) {\r\n    if (condition) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  const reset = function () {\r\n    localStorage.clear();\r\n    setArchive([]);\r\n    localStorage.setItem(\"tasks\", initTaskDefault);\r\n    setTasks(initTaskDefault);\r\n    setTimer(0);\r\n    setPause(true);\r\n    setTimerGlobal(0);\r\n  };\r\n  const pauseTask = function (status) {\r\n    setLast(Date.now());\r\n    if (status) {\r\n      setTimer(0);\r\n    }\r\n    setPause(status);\r\n  };\r\n  const resetCurrent = function () {\r\n    localStorage.clear();\r\n    setLast(Date.now());\r\n    setTimer(0);\r\n  };\r\n  const handleNumber = function (event) {\r\n    setTasks(Number(event.target.value));\r\n  };\r\n  const handleName = function (event) {\r\n    setNameTask(String(event.target.value));\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"timer\">\r\n        <input\r\n          type=\"text\"\r\n          value={nameTask}\r\n          onChange={handleName}\r\n          placeholder=\"Name of the Task\"\r\n        />\r\n        <input type=\"number\" value={tasks} onChange={handleNumber} />\r\n        <h3>Time in current Task {formatHours(timer)}</h3>\r\n        <Goals goalKind={goalKind} ></Goals>\r\n        <GoalsBar goal={goal} tasks={tasks} ></GoalsBar>\r\n        <div>\r\n          <button\r\n            className=\"finishTask\"\r\n            onClick={() => startTask()}\r\n            disabled={isDisabled(pause)}\r\n          >\r\n            Finish current task\r\n          </button>\r\n        </div>\r\n        <div className=\"toolButtons\">\r\n          <button\r\n            onClick={() => deleteLastTask()}\r\n            disabled={isDisabled(tasks <= 1)}\r\n          >\r\n            Undo\r\n          </button>\r\n          {pause ? (\r\n            <button onClick={() => pauseTask(false)}>Start</button>\r\n          ) : (\r\n            <button onClick={() => pauseTask(true)}>Stop</button>\r\n          )}\r\n          <button onClick={() => resetCurrent()}>Reset CurrentTask</button>\r\n          <button onClick={() => reset()}>Reset</button>\r\n        </div>\r\n      </div>\r\n      <h5>Total Time: {formatHours(timerGlobal)} | Average {timerGlobal && formatHours(timerGlobal/(archive.length ))}</h5>\r\n      <TaskArchive archive={archive}></TaskArchive>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}